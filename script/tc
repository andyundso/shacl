#!/usr/bin/env ruby
require 'rubygems'
require "bundler/setup"
$:.unshift(File.expand_path("../../lib", __FILE__))
$:.unshift(File.expand_path("../../spec", __FILE__))
require 'rdf'
require 'rdf/isomorphic'
require 'rdf/ordered_repo'
require 'rspec'
require 'shacl'
require 'suite_helper'
require 'getoptlong'

ASSERTOR = "https://greggkellogg.net/foaf#me"
RUN_TIME = Time.now
TEST_BASE = 'urn:x-shacl-test:/'

def earl_preamble(options)
  options[:output].write File.read(File.expand_path("../../etc/doap.ttl", __FILE__))
  options[:output].puts %(
<> foaf:primaryTopic <https://rubygems.org/gems/shex> ;
  dc:issued "#{RUN_TIME.xmlschema}"^^xsd:dateTime ;
  foaf:maker <#{ASSERTOR}> .

<#{ASSERTOR}> a foaf:Person, earl:Assertor;
  foaf:name "Gregg Kellogg";
  foaf:title "Implementor";
  foaf:homepage <https://greggkellogg.net/> .
)
end

def run_tc(t, **options)
  rel = t.id.sub('urn:x-shacl-test:/', '')
  STDERR.write "run #{rel}: #{t.label}" unless options[:quiet]
  result = "untested"

  begin
    STDERR.puts t.inspect if options[:verbose]

    shapes = SHACL.get_shapes(t.shapesGraph, logger: t.logger)
    STDERR.puts  "shape JSON:\n#{shapes.shape_json.to_json(JSON::LD::JSON_STATE)}" if options[:verbose]
    STDERR.puts  "shapes SXP:\n#{SXP::Generator.string(shapes.to_sxp_bin)}" if options[:verbose]

    results = shapes.execute(t.dataGraph, logger: t.logger)
    STDERR.puts "results: #{SXP::Generator.string results.to_sxp_bin}" if options[:verbose]

    conforms = results.all?(&:conform?)

    if t.positive_test?
      result = conforms ? "passed" : "failed"
    else
      result = conforms ? "failed" : "passed"
    end
  rescue Interrupt
    exit(1)
  rescue Exception, NoMethodError => e
    result = "exception"
    unless options[:quiet]
      STDERR.puts("Exception: #{e.message}")
      if options[:verbose]
        STDERR.puts e.backtrace
        STDERR.puts options[:logger].to_s
      else
        STDERR.puts options[:logger].to_s
      end
    end
  end
ensure
  options[:results][result] ||= 0
  options[:results][result] += 1

  if options[:debug]
    STDERR.puts "\ndebug: " + t.logger.to_s
  end

  if options[:earl]
    test = TEST_BASE + t.base.join(t.id).to_s.sub('.jsonld', '').split('/')[-2..-1].join("/")
    options[:output].puts %{
[ a earl:Assertion;
  earl:assertedBy <#{ASSERTOR}>;
  earl:subject <https://rubygems.org/gems/shex>;
  earl:test <#{test}>;
  earl:result [
    a earl:TestResult;
    earl:outcome earl:#{result};
    dc:date "#{RUN_TIME.xmlschema}"^^xsd:dateTime];
  earl:mode earl:automatic ] .
}
  end

  if options[:quiet]
    STDERR.write(result == 'passed' ? '.' : result[0,1])
  else
    STDERR.puts " #{result}"
  end
end

options = {
  output:       STDOUT,
  results: {},
  validate:     true,
  verbose:      false,
}
opts = GetoptLong.new(
  ["--debug", GetoptLong::NO_ARGUMENT],
  ["--earl", GetoptLong::NO_ARGUMENT],
  ["--help", "-?", GetoptLong::NO_ARGUMENT],
  ["--output", "-o", GetoptLong::REQUIRED_ARGUMENT],
  ["--quiet", "-q", GetoptLong::NO_ARGUMENT],
  ["--verbose", "-v", GetoptLong::NO_ARGUMENT],
)

def help(options)
  puts "Usage: #{$0} [options] [test-number ...]"
  puts "Options:"
  puts "      --debug:              Display detailed debug output"
  puts "      --earl:               Generate EARL report"
  puts "      --quiet:              Minimal output"
  puts "      --output:             Output to specified file"
  puts "      --verbose:            Verbose processing"
  puts "      --help,-?:            This message"
  exit(0)
end

opts.each do |opt, arg|
  case opt
  when '--earl'     then options[:quiet] = options[:earl] = true
  when '--debug'    then options[:debug] = true
  when '--output'   then options[:output] = File.open(arg, "w")
  when '--quiet'    then options[:quiet] = true
  when '--verbose'  then options[:verbose] = true
  end
end

earl_preamble(options) if options[:earl]
result_count = {}

%w(
  core/node
  core/property
  core/targets
  core/misc
  core/path
  core/complex
  core/validation-reports
).each do |variant|
  manifest = TEST_BASE + variant + '/manifest.ttl'

  Fixtures::SuiteTest::Manifest.open(manifest) do |m|
    m.entries.each do |t|
      next unless ARGV.empty? || ARGV.any? {|n| "#{t.id}: #{t.label}".include?(n)}
      run_tc(t, **options)
    end
  end
end

STDERR.puts "" if options[:quiet]

options[:results].each do |result, count|
  puts "#{result}: #{count}"
end
